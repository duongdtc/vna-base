import React, { forwardRef, useMemo } from 'react';
import { StyleProp, StyleSheet, View, ViewStyle } from 'react-native';

import { getStyle, useTheme } from '@theme';
import { propsToStyle } from '@vna-base/utils';

import { BlockProps } from './type';

const styles = StyleSheet.create({
  block: {
    flex: 1,
  },
});

export const Block = forwardRef(
  (
    {
      left,
      right,
      bottom,
      top,
      margin,
      marginLeft,
      marginRight,
      marginTop,
      marginBottom,
      padding,
      paddingRight,
      paddingBottom,
      paddingLeft,
      paddingTop,
      paddingHorizontal,
      paddingVertical,
      borderWidth,
      borderRadius,
      borderBottomWidth,
      borderLeftWidth,
      borderRightWidth,
      borderTopWidth,
      borderBottomRadius,
      borderLeftRadius,
      borderRightRadius,
      borderTopRadius,
      columnGap,
      gap,
      marginHorizontal,
      marginVertical,
      rowGap,
      border,
      flex,
      block,
      width,
      height,
      middle,
      zIndex,
      shadow,
      opacity,
      children,
      maxWidth,
      overflow,
      position,
      flexWrap,
      minWidth,
      alignSelf,
      maxHeight,
      minHeight,
      alignItems,
      colorTheme,
      borderStyle,
      justifyContent,
      borderColorTheme,
      flexDirection,
      flexShrink,
      style = {},
      ...rest
    }: BlockProps,
    ref: React.ForwardedRef<View>,
  ) => {
    // state
    const { colors, shadows } = useTheme();

    const styleComponent = useMemo<StyleProp<ViewStyle>>(
      () => [
        block === true && styles.block,
        border === true && {
          borderWidth: 1,
          borderColor: '#bbb',
        },
        colorTheme && { backgroundColor: colors[colorTheme] },
        borderColorTheme && { borderColor: colors[borderColorTheme] },
        middle && { alignItems: 'center' },
        shadow && shadows[shadow],
        getStyle({
          left,
          right,
          bottom,
          top,
          margin,
          marginLeft,
          marginRight,
          marginTop,
          marginBottom,
          padding,
          paddingRight,
          paddingBottom,
          paddingLeft,
          paddingTop,
          paddingHorizontal,
          paddingVertical,
          borderWidth,
          borderRadius,
          borderBottomWidth,
          borderLeftWidth,
          borderRightWidth,
          borderTopWidth,
          borderBottomRadius,
          borderLeftRadius,
          borderRightRadius,
          borderTopRadius,
          columnGap,
          gap,
          marginHorizontal,
          marginVertical,
          rowGap,
        }),
        propsToStyle([
          { flexShrink },
          { flexDirection },
          { width },
          { height },
          { maxHeight },
          { maxWidth },
          { minHeight },
          { minWidth },
          { justifyContent },
          { alignItems },
          { alignSelf },
          { flex },
          { position },
          { flexWrap },
          { zIndex },
          { overflow },
          { borderStyle },
          { opacity },
        ]),
        style,
      ],
      [
        block,
        border,
        colorTheme,
        colors,
        borderColorTheme,
        middle,
        shadow,
        shadows,
        left,
        right,
        bottom,
        top,
        margin,
        marginLeft,
        marginRight,
        marginTop,
        marginBottom,
        padding,
        paddingRight,
        paddingBottom,
        paddingLeft,
        paddingTop,
        paddingHorizontal,
        paddingVertical,
        borderWidth,
        borderRadius,
        borderBottomWidth,
        borderLeftWidth,
        borderRightWidth,
        borderTopWidth,
        borderBottomRadius,
        borderLeftRadius,
        borderRightRadius,
        borderTopRadius,
        columnGap,
        gap,
        marginHorizontal,
        marginVertical,
        rowGap,
        flexShrink,
        flexDirection,
        width,
        height,
        maxHeight,
        maxWidth,
        minHeight,
        minWidth,
        justifyContent,
        alignItems,
        alignSelf,
        flex,
        position,
        flexWrap,
        zIndex,
        overflow,
        borderStyle,
        opacity,
        style,
      ],
    );

    // render
    return (
      <View style={styleComponent} {...rest} ref={ref} children={children} />
    );
  },
);
